#!/usr/bin/env ruby
require 'optparse'

# TODO: Could be shell script so it runs just about anywhere?
class Vendor
  FILE  = %q{.gitvendor}
  USAGE = %q{
usage:
  git vendor <command>
  git vendor add <name> <url> [<path>]
  git vendor remove <name>
  git vendor update [<name>]

commands:
  add     Add a vendored git repository.
  remove  Remove a vendored git repository.
  update  Update vendored git repositories.

options:
  -b, --branch Branch name to track.
  -n  --name   Repository/directory clone name.
  }.strip

  def help options = {}
    puts USAGE
  end

=begin
  def install options = {}
    git_working_dir!
    # TODO: Install checkout hooks to auto-run vendor install when switching branches.
  end
=end

  def add url, path = nil, options = {}
    path, options = nil, path if path.kind_of?(Hash) # Ugh.
    url           = x!('git ls-remote --get-url %s', url)
    section       = options.fetch(:name, File.basename(url.sub(/[^:]*:/,''), '.git'))
    branch        = options.fetch(:branch, 'master')
    path          ||= File.join('vendor', section)

    git_working_dir! do
      x!('git config -f %s vendor.%s.url %s',    FILE, section, url)
      x!('git config -f %s vendor.%s.path %s',   FILE, section, path)
      x!('git config -f %s vendor.%s.branch %s', FILE, section, branch)
      git_vendor(section, url, path, branch)
    end
  end

  def remove name, options = {}
    git_working_dir! do
      if vendor = git_config[name]
        path = vendor.fetch('path', File.join('vendor', name))
        if Dir.exists?(path)
          puts 'remove %s' % name
          x!('rm -rf %s', path)
          x!('git config -f %s --remove-section vendor.%s', FILE, name)
        end
      end
    end
  end

  def update name, options = {}
    git_working_dir! do
      git_config.each do |section, vendor|
        next if name && name != section
        next if (options[:exclude] ||= []).include?(section)
        url    = x!('git ls-remote --get-url %s', vendor.fetch('url'))
        path   = vendor.fetch('path', File.join('vendor', section))
        branch = vendor.fetch('branch', 'master')
        git_vendor(section, url, path, branch, options)
      end
    end
  end

  private
    #--
    # TODO: escape args.
    def x! command, *args
      result = %x{#{command % args}}.strip
      $?.success? or exit(1)
      result
    end

    def git_vendor section, url, path, branch, options = {}
      puts 'vendor %s' % section
      unless Dir.exists?(path)
        puts 'clone %s %s' % [url, path]
        x!('mkdir -p %s', path)
        x!('git clone -q %s %s', url, path)
      end

      Dir.chdir(path) do
        x!('git reset --hard')
        x!('git clean -fXd')
        if x!('git rev-parse --abbrev-ref HEAD') != branch
          x!('git branch -ft %s origin/%s', branch, branch)
          x!('git checkout -qf %s', branch)
        end
        x!('git pull')
        (options[:exclude] ||= []) << section
        git_config.each{|section, vendor| update(section, options)}
      end

      # TODO: add path to a .gitignore in project if it isn't already.
    end

    def git_working_dir! dir = Dir.pwd, &block
      Dir.chdir(dir) do
        current = x!('git rev-parse --show-toplevel')
        parent  = %x{cd .. && git rev-parse -q --show-toplevel 2>/dev/null}.strip
        parent.empty? ? block.call : git_working_dir!(parent, &block)
      end
    end

    #--
    # TODO: Validate path, url and ref exist for each vendor section.
    # TODO: Check for same config path with different URLs or ref.
    def git_config
      Dir["**/#{FILE}"].inject({}) do |sections, path|
        x!('git config -l -f %s', path).split.each do |line|
          fully_qualified_key, value      = line.split('=')
          vendor, section, key            = fully_qualified_key.split('.')
          (sections[section] ||= {})[key] ||= value if vendor == 'vendor'
        end
        sections
      end
    end
end

options = {}
OptionParser.new do |o|
  o.on('-h', '--help'){ options[:help] = true }
  o.on('-b', '--branch BRANCH'){|branch| options[:branch] = branch }
  o.on('-n', '--name NAME'){|name| options[:name] = name }
  o.parse!
end

vendor  = Vendor.new
command = (ARGV.shift || 'help').strip
case command
  when 'help'   then vendor.help(*ARGV, options)
  when 'add'    then vendor.add(ARGV.shift, *ARGV, options)
  when 'remove' then vendor.remove(ARGV[0], options)
  when 'update' then vendor.update(ARGV[0], options)
  else
    warn %q{unknown command '%s'} % command
    exit 1
end

